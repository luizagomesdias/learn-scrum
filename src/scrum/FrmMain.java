package scrum;

import java.awt.Desktop;
import java.awt.Dimension;
import java.net.URI;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Luiza
 */
public class FrmMain extends javax.swing.JFrame {

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        dpnDesk = new javax.swing.JDesktopPane();
        btnStartQuiz = new javax.swing.JButton();
        lblSprintPlanningTxt = new javax.swing.JLabel();
        lblLamp = new javax.swing.JLabel();
        lblProductBacklog = new javax.swing.JLabel();
        lblSprintPlanning = new javax.swing.JLabel();
        lblSprint = new javax.swing.JLabel();
        lblProductOwner = new javax.swing.JLabel();
        lblScrumMaster = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        lblBacklogSprint = new javax.swing.JLabel();
        lblProductOwner2 = new javax.swing.JLabel();
        lblArrow1 = new javax.swing.JLabel();
        lblDevelopers = new javax.swing.JLabel();
        lblArrow2 = new javax.swing.JLabel();
        lblProductVision = new javax.swing.JLabel();
        lblProductBacklogTxt = new javax.swing.JLabel();
        lblBacklogSprintTxt = new javax.swing.JLabel();
        lblArrow3 = new javax.swing.JLabel();
        lblSprintTxt = new javax.swing.JLabel();
        lblRetrospectiveSprintTxt = new javax.swing.JLabel();
        lblReviewSprint = new javax.swing.JLabel();
        lblRetrospectiveSprint = new javax.swing.JLabel();
        lblDaily = new javax.swing.JLabel();
        lblProductTxt = new javax.swing.JLabel();
        lblReviewSprintTxt = new javax.swing.JLabel();
        lblProductOwner4 = new javax.swing.JLabel();
        lblDevelopers3 = new javax.swing.JLabel();
        lblScrumMaster3 = new javax.swing.JLabel();
        lblDevelopers2 = new javax.swing.JLabel();
        lblDevelopers5 = new javax.swing.JLabel();
        lblProductOwner3 = new javax.swing.JLabel();
        lblProductOwner5 = new javax.swing.JLabel();
        lblScrumMaster2 = new javax.swing.JLabel();
        lblScrumMaster4 = new javax.swing.JLabel();
        lblDevelopers4 = new javax.swing.JLabel();
        lblProductOwner6 = new javax.swing.JLabel();
        lblScrumMaster5 = new javax.swing.JLabel();
        lblDevelopers6 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jblLinkVideo = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuArchive = new javax.swing.JMenu();
        mnuArchiveRegistrationQuiz = new javax.swing.JMenuItem();
        menuInfo = new javax.swing.JMenu();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Learn Scrum");
        setResizable(false);

        dpnDesk.setBackground(new java.awt.Color(102, 102, 102));
        dpnDesk.setToolTipText("");

        btnStartQuiz.setBackground(new java.awt.Color(102, 102, 102));
        btnStartQuiz.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        btnStartQuiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-start-quiz.png"))); // NOI18N
        btnStartQuiz.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnStartQuiz.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnStartQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartQuizActionPerformed(evt);
            }
        });

        lblSprintPlanningTxt.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblSprintPlanningTxt.setForeground(new java.awt.Color(255, 255, 255));
        lblSprintPlanningTxt.setText("Planejamento da Sprint");

        lblLamp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-lamp_64px.png"))); // NOI18N
        lblLamp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblLamp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLampMouseClicked(evt);
            }
        });

        lblProductBacklog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-backlog _128px.png"))); // NOI18N
        lblProductBacklog.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblProductBacklog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblProductBacklogMouseClicked(evt);
            }
        });

        lblSprintPlanning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-sprint-planning_128px.png"))); // NOI18N
        lblSprintPlanning.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblSprintPlanning.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSprintPlanningMouseClicked(evt);
            }
        });

        lblSprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-sprint.png"))); // NOI18N
        lblSprint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblSprint.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        lblSprint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSprintMouseClicked(evt);
            }
        });

        lblProductOwner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-product_owner_128px.png"))); // NOI18N
        lblProductOwner.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblProductOwner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblProductOwnerMouseClicked(evt);
            }
        });

        lblScrumMaster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-scrum-master-64px.png"))); // NOI18N

        lblProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-product.png"))); // NOI18N
        lblProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblProductMouseClicked(evt);
            }
        });

        lblBacklogSprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-backlog-sprint.png"))); // NOI18N
        lblBacklogSprint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblBacklogSprint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBacklogSprintMouseClicked(evt);
            }
        });

        lblProductOwner2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-product_owner_64px.png"))); // NOI18N

        lblArrow1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-arrow.png"))); // NOI18N

        lblDevelopers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-developers_64px.png"))); // NOI18N

        lblArrow2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-arrow.png"))); // NOI18N

        lblProductVision.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblProductVision.setForeground(new java.awt.Color(255, 255, 255));
        lblProductVision.setText("Vis√£o do Produto");

        lblProductBacklogTxt.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblProductBacklogTxt.setForeground(new java.awt.Color(255, 255, 255));
        lblProductBacklogTxt.setText("Backlog do Produto");

        lblBacklogSprintTxt.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblBacklogSprintTxt.setForeground(new java.awt.Color(255, 255, 255));
        lblBacklogSprintTxt.setText("Backlog da Sprint");

        lblArrow3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-arrow.png"))); // NOI18N

        lblSprintTxt.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblSprintTxt.setForeground(new java.awt.Color(255, 255, 255));
        lblSprintTxt.setText("Sprint");

        lblRetrospectiveSprintTxt.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblRetrospectiveSprintTxt.setForeground(new java.awt.Color(255, 255, 255));
        lblRetrospectiveSprintTxt.setText("Retrospectiva Sprint");

        lblReviewSprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-review-sprint.png"))); // NOI18N
        lblReviewSprint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblReviewSprint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblReviewSprintMouseClicked(evt);
            }
        });

        lblRetrospectiveSprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-retrospective_64px.png"))); // NOI18N
        lblRetrospectiveSprint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblRetrospectiveSprint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRetrospectiveSprintMouseClicked(evt);
            }
        });

        lblDaily.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblDaily.setForeground(new java.awt.Color(255, 255, 255));
        lblDaily.setText("Reuni√£o di√°ria");
        lblDaily.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblDaily.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDailyMouseClicked(evt);
            }
        });

        lblProductTxt.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblProductTxt.setForeground(new java.awt.Color(255, 255, 255));
        lblProductTxt.setText("Incremento");

        lblReviewSprintTxt.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lblReviewSprintTxt.setForeground(new java.awt.Color(255, 255, 255));
        lblReviewSprintTxt.setText("Revis√£o Sprint");

        lblProductOwner4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-product_owner_64px.png"))); // NOI18N

        lblDevelopers3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-developers_32px.png"))); // NOI18N

        lblScrumMaster3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-scrum-master-32px.png"))); // NOI18N

        lblDevelopers2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-developers_64px.png"))); // NOI18N

        lblDevelopers5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-developers_32px.png"))); // NOI18N

        lblProductOwner3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-product_owner_64px.png"))); // NOI18N

        lblProductOwner5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-product_owner_32px.png"))); // NOI18N

        lblScrumMaster2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-scrum-master-32px.png"))); // NOI18N

        lblScrumMaster4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-scrum-master-32px.png"))); // NOI18N

        lblDevelopers4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-developers_32px.png"))); // NOI18N

        lblProductOwner6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-product_owner_64px.png"))); // NOI18N
        lblProductOwner6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblProductOwner6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblProductOwner6MouseClicked(evt);
            }
        });

        lblScrumMaster5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-scrum-master-64px.png"))); // NOI18N
        lblScrumMaster5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblScrumMaster5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblScrumMaster5MouseClicked(evt);
            }
        });

        lblDevelopers6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-developers_64px.png"))); // NOI18N
        lblDevelopers6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblDevelopers6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDevelopers6MouseClicked(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("Scrum Master");

        jLabel39.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("Product Owner");

        jLabel40.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("Developers");

        jblLinkVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-youtube.png"))); // NOI18N
        jblLinkVideo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jblLinkVideo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jblLinkVideoMouseClicked(evt);
            }
        });

        dpnDesk.setLayer(btnStartQuiz, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblSprintPlanningTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblLamp, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductBacklog, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblSprintPlanning, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblSprint, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductOwner, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblScrumMaster, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProduct, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblBacklogSprint, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductOwner2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblArrow1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblDevelopers, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblArrow2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductVision, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductBacklogTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblBacklogSprintTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblArrow3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblSprintTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblRetrospectiveSprintTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblReviewSprint, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblRetrospectiveSprint, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblDaily, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblReviewSprintTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductOwner4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblDevelopers3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblScrumMaster3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblDevelopers2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblDevelopers5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductOwner3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductOwner5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblScrumMaster2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblScrumMaster4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblDevelopers4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblProductOwner6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblScrumMaster5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(lblDevelopers6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(jLabel38, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(jLabel39, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(jLabel40, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dpnDesk.setLayer(jblLinkVideo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout dpnDeskLayout = new javax.swing.GroupLayout(dpnDesk);
        dpnDesk.setLayout(dpnDeskLayout);
        dpnDeskLayout.setHorizontalGroup(
            dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dpnDeskLayout.createSequentialGroup()
                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dpnDeskLayout.createSequentialGroup()
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblProductVision, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                                .addComponent(lblProductOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(29, 29, 29)
                                                .addComponent(lblArrow1))))
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(lblLamp)))
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(69, 69, 69)
                                        .addComponent(lblProductOwner2))
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(218, 218, 218)
                                        .addComponent(lblArrow2)))
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblProductBacklog, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblProductBacklogTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(85, 85, 85)))
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(lblScrumMaster)
                                .addGap(18, 18, 18)
                                .addComponent(lblDevelopers)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSprintPlanningTxt)
                                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                                .addComponent(lblSprintPlanning)
                                                .addGap(18, 18, 18)
                                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblProductOwner4)
                                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                                        .addComponent(lblArrow3)
                                                        .addGap(37, 37, 37)
                                                        .addComponent(lblBacklogSprint)))))
                                        .addGap(57, 57, 57))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                                        .addComponent(lblBacklogSprintTxt)
                                        .addGap(37, 37, 37))))))
                    .addGroup(dpnDeskLayout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(btnStartQuiz, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jblLinkVideo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dpnDeskLayout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(lblDevelopers2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(dpnDeskLayout.createSequentialGroup()
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSprint)
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(lblSprintTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblProductOwner5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblScrumMaster2))
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(lblDevelopers3))
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblReviewSprint))
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblReviewSprintTxt))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblRetrospectiveSprintTxt)
                                .addGap(81, 81, 81))))
                    .addGroup(dpnDeskLayout.createSequentialGroup()
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(155, 155, 155)
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(lblProductOwner6))
                                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblProductTxt))
                                    .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dpnDeskLayout.createSequentialGroup()
                                            .addGap(42, 42, 42)
                                            .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblScrumMaster4)
                                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblScrumMaster5)))
                                            .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(dpnDeskLayout.createSequentialGroup()
                                                    .addGap(18, 18, 18)
                                                    .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblDevelopers6)
                                                        .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(dpnDeskLayout.createSequentialGroup()
                                                    .addGap(30, 30, 30)
                                                    .addComponent(lblDevelopers5))))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dpnDeskLayout.createSequentialGroup()
                                            .addGap(130, 130, 130)
                                            .addComponent(lblRetrospectiveSprint)
                                            .addGap(41, 41, 41)
                                            .addComponent(lblProduct)))))
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(lblScrumMaster3)
                                .addGap(18, 18, 18)
                                .addComponent(lblDevelopers4)))
                        .addContainerGap())))
            .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                    .addContainerGap(925, Short.MAX_VALUE)
                    .addComponent(lblDaily)
                    .addGap(328, 328, 328)))
            .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dpnDeskLayout.createSequentialGroup()
                    .addGap(430, 430, 430)
                    .addComponent(lblProductOwner3)
                    .addContainerGap(819, Short.MAX_VALUE)))
        );
        dpnDeskLayout.setVerticalGroup(
            dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dpnDeskLayout.createSequentialGroup()
                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dpnDeskLayout.createSequentialGroup()
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(134, 134, 134)
                                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblScrumMaster)
                                            .addComponent(lblDevelopers)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(lblDevelopers2)
                                        .addGap(25, 25, 25)))
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSprint, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addComponent(lblProductOwner4))
                                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblProductBacklog, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                                        .addComponent(lblSprintPlanningTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(lblSprintPlanning))
                                                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                                                .addGap(66, 66, 66)
                                                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(lblBacklogSprint)
                                                                    .addComponent(lblArrow3)))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(lblArrow2)
                                                                .addGap(43, 43, 43)))))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblProductBacklogTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblBacklogSprintTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGap(168, 168, 168)
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblProductOwner2)
                                    .addComponent(lblLamp))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addComponent(lblProductVision, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblProductOwner))
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(93, 93, 93)
                                        .addComponent(lblArrow1)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSprintTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblScrumMaster3)
                            .addComponent(lblDevelopers4)))
                    .addGroup(dpnDeskLayout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(lblDevelopers3)
                        .addGap(18, 18, 18)
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProductOwner5)
                            .addComponent(lblScrumMaster2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblReviewSprintTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProductTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRetrospectiveSprint)
                            .addComponent(lblReviewSprint)
                            .addComponent(lblProduct))
                        .addGap(18, 18, 18)
                        .addComponent(lblRetrospectiveSprintTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblScrumMaster4)
                            .addComponent(lblDevelopers5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblScrumMaster5)
                            .addGroup(dpnDeskLayout.createSequentialGroup()
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(lblProductOwner6))
                                    .addGroup(dpnDeskLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblDevelopers6)))))
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dpnDeskLayout.createSequentialGroup()
                        .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnStartQuiz, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jblLinkVideo))
                        .addGap(107, 107, 107))))
            .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dpnDeskLayout.createSequentialGroup()
                    .addGap(174, 174, 174)
                    .addComponent(lblDaily, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(534, Short.MAX_VALUE)))
            .addGroup(dpnDeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dpnDeskLayout.createSequentialGroup()
                    .addGap(154, 154, 154)
                    .addComponent(lblProductOwner3)
                    .addContainerGap(520, Short.MAX_VALUE)))
        );

        menuBar.setBackground(new java.awt.Color(51, 51, 51));
        menuBar.setForeground(new java.awt.Color(255, 255, 255));

        menuArchive.setForeground(new java.awt.Color(255, 255, 255));
        menuArchive.setText("Arquivos");

        mnuArchiveRegistrationQuiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-register.png"))); // NOI18N
        mnuArchiveRegistrationQuiz.setText("Cadastro Quiz");
        mnuArchiveRegistrationQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuArchiveRegistrationQuizActionPerformed(evt);
            }
        });
        menuArchive.add(mnuArchiveRegistrationQuiz);

        menuBar.add(menuArchive);

        menuInfo.setForeground(new java.awt.Color(255, 255, 255));
        menuInfo.setText("Informa√ß√µes");
        menuBar.add(menuInfo);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dpnDesk)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dpnDesk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartQuizActionPerformed
        // Carrega o quiz
        FrmQuiz frmQuiz = new FrmQuiz();
        dpnDesk.add(frmQuiz);
        frmQuiz.show();
    }//GEN-LAST:event_btnStartQuizActionPerformed

    private void mnuArchiveRegistrationQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuArchiveRegistrationQuizActionPerformed
        // Carrega o formul√°rio de quest√µes
        FrmQuestion frmQuestions = new FrmQuestion();
        dpnDesk.add(frmQuestions);
        frmQuestions.show();
    }//GEN-LAST:event_mnuArchiveRegistrationQuizActionPerformed

    private void lblProductBacklogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblProductBacklogMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>Lista de requisitos priorizados pelo Product Owner. <br><br>O gerenciamento do Backlog do Produto inclui:<br>"
                + "‚Ä¢ Expressar claramente os itens do Backlog do Produto;<br>"
                + "‚Ä¢ Ordenar os itens do Backlog do Produto para alcan√ßar melhor as metas e miss√µes;<br>"
                + "‚Ä¢ Garantir o valor do trabalho realizado pelo Time de Desenvolvimento;<br>"
                + "‚Ä¢ Garantir que o Backlog do Produto seja vis√≠vel, transparente, claro para todos, e mostrar o que o Time Scrum vai trabalhar a seguir; e,<br>"
                + "‚Ä¢ Garantir que o Time de Desenvolvimento entenda os itens do Backlog do Produto no n√≠vel necess√°rio<br><br>"
                + "O Product Owner pode fazer o trabalho acima, ou delegar para o Time de Desenvolvimento faz√™-lo. No entanto, o Product Owner continua sendo o respons√°vel pelos trabalhos.<br><br>"
                + "O Product Owner √© uma pessoa e n√£o um comit√™. O Product Owner pode representar o desejo de um comit√™ no Backlog do Produto, mas aqueles que quiserem uma altera√ß√£o nas prioridades dos itens de Backlog devem convencer o Product Owner.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Backlog do produto:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblProductBacklogMouseClicked

    private void lblProductOwnerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblProductOwnerMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>O Product Owner, ou dono do produto, √© o respons√°vel por maximizar o valor do produto e do trabalho do Time de Desenvolvimento. Como isso √© feito pode variar amplamente atrav√©s das organiza√ß√µes, Times Scrum e indiv√≠duos.<br><br>\n"
                + "O Product Owner √© a √∫nica pessoa respons√°vel por gerenciar o Backlog do Produto.<br><br>\n"
                + "Para que o Product Owner tenha sucesso, toda a organiza√ß√£o deve respeitar as suas decis√µes. As decis√µes do Product Owner s√£o vis√≠veis no conte√∫do e na prioriza√ß√£o do Backlog do Produto.<br><br> \n"
                + "Ningu√©m tem permiss√£o para falar com o Time de Desenvolvimento sobre diferentes configura√ß√µes de prioridade, e o Time de Desenvolvimento n√£o tem permiss√£o para agir sobre o que outras pessoas disserem.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Product Owner:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblProductOwnerMouseClicked

    private void jblLinkVideoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jblLinkVideoMouseClicked
        try {
            URI link = new URI("https://www.youtube.com/watch?v=XfvQWnRgxG0");
            Desktop.getDesktop().browse(link);

        } catch (Exception erro) {
            System.out.println(erro);
        }
    }//GEN-LAST:event_jblLinkVideoMouseClicked

    private void lblLampMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLampMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>O que vamos fazer?<br>\n"
                + "Tudo come√ßa com a vis√£o do produto. <br><br>\n"
                + "O Product Owner √© respons√°vel por prover essa vis√£o. <br><br>\n"
                + "Descrever o que ele quer e aonde quer chegar. <br><br>\n"
                + "4 passos para criar uma vis√£o do produto: <br>\n"
                + "‚Ä¢	Desenvolver o objetivo do produto √°gil; <br>\n"
                + "‚Ä¢	Criar um rascunho acerca da declara√ß√£o de vis√£o √°gil; <br>\n"
                + "‚Ä¢	Validar e revisar a declara√ß√£o de vis√£o √°gil; <br>\n"
                + "‚Ä¢	Finalizar sua declara√ß√£o de vis√£o √°gil;<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Vis√£o do Produto:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblLampMouseClicked

    private void lblSprintPlanningMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSprintPlanningMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>‚Ä¢	Revisar o backlog;<br>"
                + "‚Ä¢	Acordar pr√≥xima Sprint; <br>"
                + "‚Ä¢	Definir objetivo da Sprint; <br>"
                + "‚Ä¢	Definir/ estimar o backlog da Sprint.<br><br>"
                + "O trabalho a ser realizado na Sprint √© planejado na reuni√£o de planejamento da Sprint. Este plano √© criado com o trabalho colaborativo de todo o Time Scrum. <br><br>\n"
                + "Reuni√£o de planejamento da Sprint possui um time-box com no m√°ximo oito horas para uma Sprint de um m√™s de dura√ß√£o.<br>Para Sprints menores, este evento √© usualmente menor. O Scrum Master garante que o evento ocorra e que os participantes entendam seu prop√≥sito. O Scrum Master ensina o Time Scrum a manter-se dentro dos limites do time-box. <br><br>\n"
                + "A reuni√£o de planejamento da Sprint responde as seguintes quest√µes: <br>\n"
                + "‚Ä¢	O que pode ser entregue como resultado do incremento da pr√≥xima Sprint? <br>\n"
                + "‚Ä¢	Como o trabalho necess√°rio para entregar o incremento ser√° realizado?<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Planejamento da Sprint:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblSprintPlanningMouseClicked

    private void lblBacklogSprintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBacklogSprintMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>O Backlog da Sprint √© um conjunto de itens do Backlog do Produto selecionados para a Sprint, juntamente com o plano para entregar o incremento do produto e atingir o objetivo da Sprint.<br><br>\n"
                + "O Backlog da Sprint √© a previs√£o do Time de Desenvolvimento sobre qual funcionalidade estar√° no pr√≥ximo incremento e sobre o trabalho necess√°rio para entregar essa funcionalidade em um incremento ‚ÄúPronto‚Äù. <br><br>\n"
                + "O Backlog da Sprint √© um plano com detalhes suficientes que as mudan√ßas no progresso sejam entendidas durante a Reuni√£o Di√°ria. O Time de Desenvolvimento modifica o Backlog da Sprint ao longo de toda a Sprint, e o Backlog da Sprint vai surgindo durante a Sprint.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Backlog da Sprint:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblBacklogSprintMouseClicked

    private void lblSprintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSprintMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>O cora√ß√£o do Scrum √© a Sprint, um time-boxed de um m√™s ou menos, durante o qual um ‚ÄúPronto‚Äù, vers√£o incremental potencialmente utiliz√°vel do produto, √© criado.<br><br>\n"
                + "Sprints tem dura√ß√µes coerentes em todo o esfor√ßo de desenvolvimento. Uma nova Sprint inicia imediatamente ap√≥s a conclus√£o da Sprint anterior. <br><br>\n"
                + "Durante a Sprint: <br><br>\n"
                + "‚Ä¢	N√£o s√£o feitas mudan√ßas que possam por em perigo o objetivo da Sprint; <br>\n"
                + "‚Ä¢	As metas de qualidade n√£o diminuem; e, <br>\n"
                + "‚Ä¢	O escopo pode ser clarificado e renegociado entre o Product Owner e o Time de Desenvolvimento quanto mais for aprendido.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Sprint:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblSprintMouseClicked

    private void lblReviewSprintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblReviewSprintMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>A Revis√£o da Sprint √© executada no final da Sprint para inspecionar o incremento e adaptar o Backlog do Produto se necess√°rio. <br><br>\n"
                + "Esta √© uma reuni√£o time-boxed de 4 horas de dura√ß√£o para uma Sprint de um m√™s. Para Sprints menores, este evento √© usualmente menor. <br><br>\n"
                + "A Reuni√£o de Revis√£o inclui os seguintes elementos: <br><br>\n"
                + "‚Ä¢	Os participantes incluem o Time Scrum e os Stakeholders chaves convidados pelo Product Owner; <br>\n"
                + "‚Ä¢	O Product Owner esclarece quais itens do Backlog do Produto foram ‚ÄúProntos‚Äù e quais n√£o foram ‚ÄúProntos‚Äù; <br>\n"
                + "‚Ä¢	O Time de Desenvolvimento discute o que foi bem durante a Sprint, quais problemas ocorreram dentro da Sprint, e como estes problemas foram resolvidos; <br>\n"
                + "‚Ä¢	O Time de Desenvolvimento demonstra o trabalho que est√° ‚ÄúPronto‚Äù e responde as quest√µes sobre o incremento; <br>\n"
                + "‚Ä¢	O Product Owner discute o Backlog do Produto tal como est√°. Ele (ou ela) projeta as prov√°veis datas de conclus√£o baseado no progresso at√© a data (se necess√°rio); <br>\n"
                + "‚Ä¢	O grupo todo colabora sobre o que fazer a seguir, e √© assim que a Reuni√£o de Revis√£o da Sprint fornece valiosas entradas para a Reuni√£o de Planejamento da pr√≥xima Sprint; <br>\n"
                + "‚Ä¢	An√°lise de como o mercado ou o uso potencial do produto pode ter mudado e o que √© a coisa mais importante a se fazer a seguir; e, <br>\n"
                + "‚Ä¢	An√°lise da linha do tempo, or√ßamento, potenciais capacidades, e mercado para a pr√≥xima vers√£o esperada do produto.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 600));
        JOptionPane.showMessageDialog(null, pnlMessage, "Revis√£o da Sprint:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblReviewSprintMouseClicked

    private void lblRetrospectiveSprintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRetrospectiveSprintMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>A Retrospectiva da Sprint √© uma oportunidade para o Time Scrum inspecionar a si pr√≥prio e criar um plano para melhorias a serem aplicadas na pr√≥xima Sprint. <br><br>\n"
                + "A Retrospectiva da Sprint ocorre depois da Revis√£o da Sprint e antes da reuni√£o de planejamento da pr√≥xima Sprint. Esta √© uma reuni√£o time-boxed de tr√™s horas para uma Sprint de um m√™s. Para Sprint menores, este evento √© usualmente menor. <br><br>\n"
                + "O prop√≥sito da Retrospectiva da Sprint √©: <br><br>\n"
                + "‚Ä¢ Inspecionar como a √∫ltima Sprint foi em rela√ß√£o √†s pessoas, aos relacionamentos, aos processos e √†s ferramentas; <br>\n"
                + "‚Ä¢ Identificar e ordenar os principais itens que foram bem e as potenciais melhorias; e, <br>\n"
                + "‚Ä¢ Criar um plano para implementar melhorias no modo que o Time Scrum faz seu trabalho;<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Retrospectiva da Sprint:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblRetrospectiveSprintMouseClicked

    private void lblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblProductMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>O incremento √© a soma de todos os itens do Backlog do Produto completados durante a Sprint e o valor dos incrementos de todas as Sprints anteriores. <br><br> \n"
                + "Ao final da Sprint um novo incremento deve estar ‚ÄúPronto‚Äù, o que significa que deve estar na condi√ß√£o utiliz√°vel e atender a defini√ß√£o de ‚ÄúPronto‚Äù do Time Scrum. <br><br>\n"
                + "Este deve estar na condi√ß√£o utiliz√°vel independente do Product Owner decidir por liber√°-lo realmente ou n√£o. <br><br><br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Incremento:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblProductMouseClicked

    private void lblProductOwner6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblProductOwner6MouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>O Product Owner, ou dono do produto, √© o respons√°vel por maximizar o valor do produto e do trabalho do Time de Desenvolvimento. Como isso √© feito pode variar amplamente atrav√©s das organiza√ß√µes, Times Scrum e indiv√≠duos.<br><br>\n"
                + "O Product Owner √© a √∫nica pessoa respons√°vel por gerenciar o Backlog do Produto.<br><br>\n"
                + "Para que o Product Owner tenha sucesso, toda a organiza√ß√£o deve respeitar as suas decis√µes. As decis√µes do Product Owner s√£o vis√≠veis no conte√∫do e na prioriza√ß√£o do Backlog do Produto.<br><br> \n"
                + "Ningu√©m tem permiss√£o para falar com o Time de Desenvolvimento sobre diferentes configura√ß√µes de prioridade, e o Time de Desenvolvimento n√£o tem permiss√£o para agir sobre o que outras pessoas disserem.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Product Owner:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblProductOwner6MouseClicked

    private void lblScrumMaster5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblScrumMaster5MouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>‚Ä¢	√© respons√°vel por garantir que o Scrum seja entendido e aplicado. <br>\n"
                + "‚Ä¢	faz isso para garantir que o Time Scrum adere √† teoria, pr√°ticas e regras do Scrum. <br>\n"
                + "‚Ä¢	√© um servo-l√≠der para o Time Scrum. <br>\n"
                + "‚Ä¢	ajuda aqueles que est√£o fora do Time Scrum a entender quais as suas intera√ß√µes com o Time Scrum s√£o √∫teis e quais n√£o s√£o. <br>\n"
                + "‚Ä¢	ajuda todos a mudarem estas intera√ß√µes para maximizar o valor criado pelo Time Scrum.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Scrum Master:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblScrumMaster5MouseClicked

    private void lblDevelopers6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDevelopers6MouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>O Time de Desenvolvimento consiste de profissionais que realizam o trabalho de entregar uma vers√£o us√°vel que potencialmente incrementa o produto ‚ÄúPronto‚Äù ao final de cada Sprint. <br><br>\n"
                + "Somente integrantes do Time de Desenvolvimento criam incrementos. <br><br>\n"
                + "Os Times de Desenvolvimento s√£o estruturados e autorizados pela organiza√ß√£o para organizar e gerenciar seu pr√≥prio trabalho. <br><br>\n"
                + "Os Times de Desenvolvimento tem as seguintes caracter√≠sticas: <br><br>\n"
                + "‚Ä¢ Eles s√£o auto-organizados. Ningu√©m (nem mesmo o Scrum Master) diz ao Time de Desenvolvimento como transformar o Backlog do Produto em incrementos de funcionalidades potencialmente utiliz√°veis; <br>\n"
                + "‚Ä¢ Times de Desenvolvimento s√£o multifuncionais, possuindo todas as habilidades necess√°rias, enquanto equipe, para criar o incremento do Produto. <br>\n"
                + "‚Ä¢ O Scrum n√£o reconhece t√≠tulos para os integrantes do Time de Desenvolvimento que n√£o seja o Desenvolvedor, independentemente do trabalho que est√° sendo realizado pela pessoa; N√£o h√° exce√ß√µes para esta regra. <br>\n"
                + "‚Ä¢ Individualmente os integrantes do Time de Desenvolvimento podem ter habilidades especializadas e √°rea de especializa√ß√£o, mas a responsabilidade pertence ao Time de Desenvolvimento como um todo; e, <br>\n"
                + "‚Ä¢ Times de Desenvolvimento n√£o cont√©m sub-times dedicados a dom√≠nios espec√≠ficos de conhecimento, tais como teste ou an√°lise de neg√≥cios. <br><br>\n"
                + "O tamanho ideal do Time de Desenvolvimento √© pequeno o suficiente para se manter √°gil e grande o suficiente para completar uma parcela significativa do trabalho dentro dos limites da Sprint.<br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 600));
        JOptionPane.showMessageDialog(null, pnlMessage, "Time de Desenvolvimento:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblDevelopers6MouseClicked

    private void lblDailyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDailyMouseClicked
        PnlMessage pnlMessage = new PnlMessage();
        pnlMessage.setDescription("<html><body>A Reuni√£o Di√°ria do Scrum √© um evento time-boxed de 15 minutos, para que o Time de Desenvolvimento possa sincronizar as atividades e criar um plano para as pr√≥ximas 24 horas. <br><br>\n"
                + "Esta reuni√£o √© feita para inspecionar o trabalho desde a √∫ltima Reuni√£o Di√°ria, e prever o trabalho que dever√° ser feito antes da pr√≥xima Reuni√£o Di√°ria. <br><br>\n"
                + "Durante a reuni√£o os membros do Time de Desenvolvimento esclarecem: <br><br>\n"
                + "‚Ä¢	O que eu fiz ontem que ajudou o Time de Desenvolvimento a atender a meta da Sprint? <br>\n"
                + "‚Ä¢	O que eu farei hoje para ajudar o Time de Desenvolvimento atender a meta da Sprint? <br>\n"
                + "‚Ä¢	Eu vejo algum obst√°culo que impe√ßa a mim ou o Time de Desenvolvimento no atendimento da meta da Sprint? <br><br&gtcom HTML!</body></html>");
        UIManager.put("OptionPane.minimumSize", new Dimension(500, 400));
        JOptionPane.showMessageDialog(null, pnlMessage, "Reuni√£o Di√°ria:", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_lblDailyMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("MS Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmMain frmMain = new FrmMain();
                frmMain.setExtendedState(JFrame.MAXIMIZED_BOTH);
                frmMain.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStartQuiz;
    private javax.swing.JDesktopPane dpnDesk;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jblLinkVideo;
    private javax.swing.JLabel lblArrow1;
    private javax.swing.JLabel lblArrow2;
    private javax.swing.JLabel lblArrow3;
    private javax.swing.JLabel lblBacklogSprint;
    private javax.swing.JLabel lblBacklogSprintTxt;
    private javax.swing.JLabel lblDaily;
    private javax.swing.JLabel lblDevelopers;
    private javax.swing.JLabel lblDevelopers2;
    private javax.swing.JLabel lblDevelopers3;
    private javax.swing.JLabel lblDevelopers4;
    private javax.swing.JLabel lblDevelopers5;
    private javax.swing.JLabel lblDevelopers6;
    private javax.swing.JLabel lblLamp;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JLabel lblProductBacklog;
    private javax.swing.JLabel lblProductBacklogTxt;
    private javax.swing.JLabel lblProductOwner;
    private javax.swing.JLabel lblProductOwner2;
    private javax.swing.JLabel lblProductOwner3;
    private javax.swing.JLabel lblProductOwner4;
    private javax.swing.JLabel lblProductOwner5;
    private javax.swing.JLabel lblProductOwner6;
    private javax.swing.JLabel lblProductTxt;
    private javax.swing.JLabel lblProductVision;
    private javax.swing.JLabel lblRetrospectiveSprint;
    private javax.swing.JLabel lblRetrospectiveSprintTxt;
    private javax.swing.JLabel lblReviewSprint;
    private javax.swing.JLabel lblReviewSprintTxt;
    private javax.swing.JLabel lblScrumMaster;
    private javax.swing.JLabel lblScrumMaster2;
    private javax.swing.JLabel lblScrumMaster3;
    private javax.swing.JLabel lblScrumMaster4;
    private javax.swing.JLabel lblScrumMaster5;
    private javax.swing.JLabel lblSprint;
    private javax.swing.JLabel lblSprintPlanning;
    private javax.swing.JLabel lblSprintPlanningTxt;
    private javax.swing.JLabel lblSprintTxt;
    private javax.swing.JMenu menuArchive;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuInfo;
    private javax.swing.JMenuItem mnuArchiveRegistrationQuiz;
    // End of variables declaration//GEN-END:variables

}
